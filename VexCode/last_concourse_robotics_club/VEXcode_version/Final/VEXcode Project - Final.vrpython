{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nimport math\nimport random\nfrom vexcode import *\n\ndrivetrain = Drivetrain()\nmagnet = Electromagnet(\"magnet\", 0)\npen = Pen()\nbrain = Brain()\nleft_bumper = Bumper(\"leftBumper\", 1)\nright_bumper = Bumper(\"rightBumper\", 2)\ndistance = Distance()\nfront_eye = EyeSensor(\"fronteye\", 3)\ndown_eye = EyeSensor(\"downeye\", 4)\nlocation = Location()\n\n#endregion VEXcode Generated Robot Configuration\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode VR Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vexcode import *\n\n\n# MAIN CODE - LOGIC\ndef main():\n    drivetrain.set_turn_velocity(200, PERCENT)\n    drivetrain.set_drive_velocity(200, PERCENT)\n    move_to_one()\n    move_to_three()\n    move_to_four()\n    move_to_two()\n    move_to_start_point()\n\n\n\n# VR threads â€” Do not delete\nvr_thread(main())\n\n\n\n# COMPETITION CODE\n# DEFINITIONS FOR EACH MOVE\n\ndef move_to_one():\n    # since base point -> green 1\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 225, MM)\n\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 225, MM)\n\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 475, MM)\n\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 225, MM)\n\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 165, MM)\n\n\n\ndef move_to_three():\n    # since green 1 -> base point\n    drivetrain.drive_for(REVERSE, 165, MM)\n\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 225, MM)\n\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 475, MM)\n    \n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 225, MM)\n\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 225, MM)\n\n\n    # since base point -> green 3\n    for x in range(1, 12):\n        module = x % 2\n        if x == 1 or module != 0:\n            if x == 9:\n                drivetrain.turn_for(RIGHT, 90, DEGREES)\n                drivetrain.drive_for(FORWARD, 470, MM)\n                continue\n\n            if x == 11:\n                drivetrain.turn_for(RIGHT, 90, DEGREES)\n                drivetrain.drive_for(FORWARD, 150, MM)\n                continue\n            \n            drivetrain.turn_for(RIGHT, 90, DEGREES)\n            drivetrain.drive_for(FORWARD, 245, MM)\n        \n        elif module == 0:\n            if x == 10:\n                drivetrain.turn_for(RIGHT, 90, DEGREES)\n                drivetrain.drive_for(FORWARD, 225, MM)\n                continue\n            \n            drivetrain.turn_for(LEFT, 90, DEGREES)\n            drivetrain.drive_for(FORWARD, 245, MM)\n\n\n\ndef move_to_four():\n    # since green 3 -> green 4\n    drivetrain.drive_for(REVERSE, 150, MM)\n    \n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 225, MM)\n\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 470, MM)\n\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 950, MM)\n\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 250, MM)\n\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 525, MM)\n\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 700, MM)\n\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 250, MM)\n\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 1200, MM)\n\n\n\ndef move_to_two():\n    # since green 4 -> green 2\n    drivetrain.drive_for(REVERSE, 1200, MM)\n\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 250, MM)\n\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 700, MM)\n\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 525, MM)\n\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 250, MM)\n\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 725, MM)\n    \n    for x in range(1, 6):\n        if x % 2 == 0:\n            if x == 4:\n                drivetrain.turn_for(RIGHT, 90, DEGREES)\n                drivetrain.drive_for(FORWARD, 225, MM)\n                continue\n\n            drivetrain.turn_for(LEFT, 90, DEGREES)\n            drivetrain.drive_for(FORWARD, 225, MM)\n\n        elif x % 2 != 0:\n            if x == 1:\n                drivetrain.turn_for(LEFT, 90, DEGREES)\n                drivetrain.drive_for(FORWARD, 230, MM)\n                continue\n\n            if x == 5:\n                drivetrain.turn_for(LEFT, 90, DEGREES)\n                drivetrain.drive_for(FORWARD, 210, MM)\n                continue\n\n            drivetrain.turn_for(RIGHT, 90, DEGREES)\n            drivetrain.drive_for(FORWARD, 245, MM)\n\n\n\ndef move_to_start_point():\n    for x in range(1, 6):\n        if x % 2 == 0:\n            if x == 2:\n                drivetrain.turn_for(LEFT, 90, DEGREES)\n                drivetrain.drive_for(FORWARD, 525, MM)\n                continue\n\n            drivetrain.turn_for(LEFT, 90, DEGREES)\n            drivetrain.drive_for(FORWARD, 245, MM)\n\n\n        elif x % 2 != 0:\n            if x == 1:\n                drivetrain.drive_for(REVERSE, 225, MM)\n                continue\n\n            if x == 5:\n                drivetrain.turn_for(RIGHT, 90, DEGREES)\n                drivetrain.drive_for(FORWARD, 265, MM)\n                continue\n            \n            drivetrain.turn_for(RIGHT, 90, DEGREES)\n            drivetrain.drive_for(FORWARD, 245, MM)\n        \n    drivetrain.turn_for(RIGHT, 180, DEGREES)\n            \n            \n\n\n\n\n\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"PG","sdkVersion":"20211013.15.00.00","appVersion":"2.2.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","playground":"WallMaze","robotModel":"vr","target":"Physical"}